type Account {
  # The ID of an object
  id: ID!
  provider: AccountProvider
  uid: String!
  email: String
  displayName: String
  photoURL: String
}

enum AccountProvider {
  FACEBOOK
}

type Comment implements Node {
  # The ID of an object
  id: ID!
  story: Story!
  parent: Comment
  author: User!
  comments: [Comment]
  text: String
  pointsCount: Int!
  createdAt: String!
  updatedAt: String!
}

input CreateStoryInput {
  title: String
  text: String
  validateOnly: Boolean
  clientMutationId: String
}

type CreateStoryPayload {
  story: Story
  clientMutationId: String
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String
}

type DeleteUserPayload {
  clientMutationId: String
}

type Mutation {
  # Authenticate a user with Firebase credentials.
  signIn(input: SignInInput!): SignInPayload

  # Delete session cookie.
  signOut(input: SignOutInput!): SignOutPayload

  # Update user.
  updateUser(input: UpdateUserInput!): UpdateUserPayload

  # Delete user.
  deleteUser(input: DeleteUserInput!): DeleteUserPayload

  # Create a new story.
  createStory(input: CreateStoryInput!): CreateStoryPayload
  updateStory(input: UpdateStoryInput!): UpdateStoryPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node

  # Fetches objects given their IDs
  nodes(
    # The IDs of objects
    ids: [ID!]!
  ): [Node]!
  me: User
  user(username: String!): User
  users(after: String, first: Int): UserConnection
  story(slug: String!): Story
  stories: [Story]
}

input SignInInput {
  idToken: String!
  refreshToken: String!
  clientMutationId: String
}

type SignInPayload {
  token: String
  clientMutationId: String
}

input SignOutInput {
  clientMutationId: String
}

type SignOutPayload {
  clientMutationId: String
}

type Story implements Node {
  # The ID of an object
  id: ID!
  author: User!
  slug: String!
  title: String!
  text: String!
  isURL: Boolean!
  comments: [Comment]
  pointsCount: Int!
  commentsCount: Int!
  createdAt: String!
  updatedAt: String!
}

input UpdateStoryInput {
  id: ID!
  title: String
  text: String
  approved: Boolean
  validateOnly: Boolean
  clientMutationId: String
}

type UpdateStoryPayload {
  story: Story
  clientMutationId: String
}

input UpdateUserInput {
  id: ID!
  username: String
  email: String
  displayName: String
  photoURL: String
  isAdmin: Boolean
  validateOnly: Boolean
  clientMutationId: String
}

type UpdateUserPayload {
  user: User
  clientMutationId: String
}

type User implements Node {
  # The ID of an object
  id: ID!
  username: String!
  email: String
  displayName: String
  photoURL: String
  accounts: [Account]
  isAdmin: Boolean
  createdAt: String
  updatedAt: String
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]
  totalCount: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}
